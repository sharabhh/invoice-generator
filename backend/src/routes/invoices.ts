import express from "express";
import { PrismaClient } from "@prisma/client";
import invoiceNumberGenerator from "../utils/invoiceNumberGenerator";

const router = express.Router();
const prisma = new PrismaClient();

router.get("/", (req, res) => {
  res.send("hello from invoice");
});



// create new invoice
router.post("/new", async (req, res) => {
    // items will be a array of objects
    const { date, invoiceNumber, currency, items, clientName } = req.body;
    const generatedInvoiceNumber = invoiceNumberGenerator()

  try {
    const newInvoice = await prisma.invoice.create({
      data: {
        date: new Date(date),
        invoiceNumber: generatedInvoiceNumber,   //autogenerated invoice number
        currency,
        clientName,
        list: {
          create: items.map((item: any) => ({
            name: item.name,
            price: item.price,
            quantity: item.quantity,
            taxes: {
              create: item.taxes.map((tax: any) => ({
                title: tax.title,
                rate: tax.rate,
              })),
            },
            subTotal: item.price * item.quantity,
            totalTax: item.taxes.reduce(
              (acc: number, tax: any) =>
                acc + item.price * item.quantity * (tax.rate / 100),
              0
            ),
            total:
              items.reduce(
                (acc: number, item: any) => acc + item.price * item.quantity,
                0
              ) +
              items.reduce(
                (acc: number, item: any) =>
                  acc +
                  item.taxes.reduce(
                    (taxAcc: number, tax: any) =>
                      taxAcc + item.price * item.quantity * (tax.rate / 100),
                    0
                  ),
                0
              ),
          })),
        },
      },
    });

    res.json(newInvoice);
  } catch (e) {
    console.log(e);
    res.status(500).json({"msg": "something went wrong", e})
  }
});

export default router;
